
data:
  files_to_look_for: ".java"            # choose files which should be clustered
  exclude_files: ["Miniprojekt1.java"]  # exclude files which should not be clustered
  exclude_folders: ["___", "___"]       # exclude folders with solutions which should not be clustered
  max_files: 100                        # maximum number of files to cluster; set to 0 or remove to cluster all files
  input_path: ""                        # input path of the student programming solutions
  output_path: "z_Output"               # output path of various pipeline results for the student programming solutions
  score_bins:                           # define clustering layers to prevent similar solutions with different evaluation points to be in the same cluster
  - [100, 100]
  - [90, 99]
  - [75, 90]
  - [60, 74]
  - [50, 59]
  - [0, 49]
  # score_bins:
  # - [0, 100]

  # ------------------------------------------------------------------------------- #

embedding:
  model: "microsoft/codebert-base"  # embedding model for code snippets

# ------------------------------------------------------------------------------- #
dim_reduction:
# --- umap ---
  method: "umap"
  params:
    n_components: 2         # target dimensions after reduction; default: 2
    n_neighbors: 15         # number of local neighbors considered; default: 15
    min_dist: 0.1           # minimum distance between points in low-dimensional space; default: 0.1
    metric: "euclidean"     # distance metric; options: 'euclidean', 'cosine', 'manhattan'; default: 'euclidean'
    random_state: 42       # ensures reproducible results; default: None
    spread: 1.0             # maximum effective cluster spread; default: 1.0
    learning_rate: 1.0      # learning rate for optimization process; default: 1.0
    init: "spectral"        # initialization method; options: 'spectral', 'random'; default: 'spectral'

# # --- pca ---
#   method: "pca"
#   params:
#     n_components: 2        # target dimensions after reduction; default: all
#     svd_solver: "auto"     # singular value decomposition method; options: 'auto', 'full', 'arpack', 'randomized'; default: 'auto'
#     random_state: 42       # ensures reproducible results; default: None

# # --- t-sne ---
#   method: "tsne"
#   params:
#     n_components: 2           # target dimensions after reduction; default: 2
#     perplexity: 30.0          # number of effective nearest neighbors; typical between 5 and 50; !!!MUST BE HIGHER THAN SAMPLE SIZE!!!; default: 30.0
#     learning_rate: 200.0      # learning rate for t-SNE optimization; typical: 10-1000; default: 200.0
#     n_iter: 1000              # number of optimization iterations; default: 1000
#     metric: "euclidean"       # distance metric for pairwise distances; options: 'euclidean', 'cosine', 'manhattan'; default: 'euclidean'
#     random_state: 42          # ensures reproducible results; default: None
#     init: "random"            # initialization method; options: 'random', 'pca'; default: 'random'
#     early_exaggeration: 12.0  # controls how tight clusters are in early stages; default: 12.0
#     angle: 0.5                # trade-off between speed and accuracy (Barnes-Hut only); default: 0.5
#     verbose: 0                # verbosity level; 0 = silent, 1 = progress messages

# ------------------------------------------------------------------------------- #

clustering:
# # --- hdbscan ---
#   method: "hdbscan"
#   params:
#     min_cluster_size: 2             # minimum number of points to form a cluster; default: 5
#     min_samples: 1                  # sensitivity for identifying outliers; default: None
#     cluster_selection_epsilon: 0.5  # tolerance parameter for cluster density; default: 0.0
#     metric: "euclidean"             # distance metric for clustering; options: 'euclidean', 'manhattan', 'cosine', etc.; default: 'euclidean'
#     cluster_selection_method: "eom" # method for selecting clusters; options: 'eom', 'leaf'; default: 'eom'
#     alpha: 1.0                      # relative weight of minimum spanning tree edge weight for cluster stability; default: 1.0
#     allow_single_cluster: false     # whether to allow only a single cluster; default: false

# --- k-means ---
  method: "kmeans"
  params:
    n_clusters: 6             # number of clusters; !!!SHOULD BE THE SAME AS SCORE_BINS!!! required for k-means
    init: "k-means++"         # initialization method; options: 'k-means++', 'random'; default: 'k-means++'
    n_init: 10                # number of time the k-means algorithm will be run with different centroid seeds; default: 10
    max_iter: 300             # maximum number of iterations for a single run; default: 300
    random_state: 42          # ensures reproducible clustering results; default: None
